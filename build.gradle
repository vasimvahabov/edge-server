plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.travelbookingsystem'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2025.0.0")
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway-server-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

def checkPropertiesNotEmpty = { String task, def props ->
    if (props.isEmpty()) {
        throw new GradleException("task failed: No -P parameters passed...")
    }
}

def checkProperty = { String task, String prop, def props ->
    if(!props.containsKey(prop) || !project.property(prop).toString()) {
        throw new GradleException("$task failed : $prop is not passed as a parameter...");
    }
}

tasks.named('bootBuildImage').configure {
    doFirst {
        checkPropertiesNotEmpty(name, project.gradle.startParameter.projectProperties)

        def props = project.gradle.startParameter.projectProperties
        checkProperty(name, 'version', props)

        if (project.findProperty("publishImage")?.toBoolean()) {
            ['registryUsername', 'registryToken', 'registryUrl'].each { prop ->
                checkProperty(name, prop, props)
            }
        }
    }

    builder = "docker.io/paketobuildpacks/builder-jammy-base"
    version = project.findProperty("version")
    imageName = "ghcr.io/vasimvahabov/edge-server" + ":" + version
    publish = project.findProperty("publishImage")?.toBoolean() ?: false
    environment = [
            "BP_JVM_VERSION": JavaVersion.current().majorVersion
    ]
    verboseLogging = true

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }

}

tasks.named('test') {
	useJUnitPlatform()
}
